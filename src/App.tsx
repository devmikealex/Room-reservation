import {
    Button,
    Card,
    FormControl,
    Grid,
    InputLabel,
    MenuItem,
    Select,
    SelectChangeEvent,
    TextField,
    Typography,
} from '@mui/material'
import { ChangeEvent, useState } from 'react'
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'
import 'dayjs/locale/ru'
import { Dayjs } from 'dayjs'

function App() {
    const [tower, setTower] = useState('')
    const [level, setLevel] = useState('')
    const [room, setRoom] = useState('')
    const [startTime, setStartTime] = useState<Dayjs | null>(null)
    const [endTime, setEndTime] = useState<Dayjs | null>(null)
    const [comment, setComment] = useState('')

    const handleTowerChange = (event: SelectChangeEvent) => {
        setTower(event.target.value)
    }

    const handleLevelChange = (event: SelectChangeEvent) => {
        setLevel(event.target.value)
    }

    const handleRoomChange = (event: SelectChangeEvent) => {
        setRoom(event.target.value)
    }

    const handleCommentChange = (event: ChangeEvent<HTMLTextAreaElement>) => {
        setComment(event.target.value)
    }

    function handleSubmit(e: React.MouseEvent) {
        // e.preventDefault()
        const obj = {
            tower,
            level,
            room,
            startTime,
            endTime,
            comment,
        }
        console.log('üöÄJSON:', JSON.stringify(obj))
        document.querySelector('pre')!.textContent = JSON.stringify(obj, null, 2)
    }

    function handleReset() {
        console.log('handle-Reset')
        setTower('')
        setLevel('')
        setRoom('')
        setStartTime(null)
        setEndTime(null)
        setComment('')
    }

    const levelItems = []
    for (let index = 3; index <= 27; index++) {
        levelItems.push(
            <MenuItem key={index} value={index}>
                –≠—Ç–∞–∂ {index}
            </MenuItem>
        )
    }

    const roomItems = []
    for (let index = 1; index <= 10; index++) {
        roomItems.push(
            <MenuItem key={index} value={index}>
                –ö–æ–º–Ω–∞—Ç–∞ {index}
            </MenuItem>
        )
    }

    return (
        <div className='App'>
            <Typography
                variant='h4'
                component='h1'
                align='center'
                gutterBottom
                maxWidth={600}
                mx='auto'
            >
                –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã B2B
            </Typography>

            <Card
                component='form'
                sx={{
                    maxWidth: 550,
                    py: { xs: 2, sm: 4 },
                    px: { xs: 2, sm: 5 },
                    display: 'flex',
                    flexDirection: 'column',
                    gap: 1.4,
                    margin: '0 auto',
                    boxShadow: 2,
                }}
                onSubmit={(e) => {
                    e.preventDefault()
                }}
            >
                <Typography variant='h5' gutterBottom>–í—ã–±–æ—Ä –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã</Typography>

                <FormControl fullWidth>
                    <InputLabel id='tower-select-label'>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—à–Ω—é *</InputLabel>
                    <Select
                        labelId='tower-select-label'
                        id='tower-select'
                        label='–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—à–Ω—é'
                        required
                        value={tower}
                        onChange={handleTowerChange}
                    >
                        <MenuItem value={'A'}>–ë–∞—à–Ω—è –ê</MenuItem>
                        <MenuItem value={'B'}>–ë–∞—à–Ω—è –ë</MenuItem>
                    </Select>
                </FormControl>

                <FormControl fullWidth>
                    <InputLabel id='level-select-label'>
                        –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–∂ *
                    </InputLabel>
                    <Select
                        labelId='level-select-label'
                        id='level-select'
                        label='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–∂'
                        required
                        value={level}
                        onChange={handleLevelChange}
                        MenuProps={{ PaperProps: { sx: { maxHeight: 350 } } }}
                    >
                        {levelItems}
                    </Select>
                </FormControl>

                <FormControl fullWidth>
                    <InputLabel id='room-select-label'>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É *</InputLabel>
                    <Select
                        labelId='room-select-label'
                        id='room-select'
                        label='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É'
                        required
                        value={room}
                        onChange={handleRoomChange}
                    >
                        {roomItems}
                    </Select>
                </FormControl>

                <Typography variant='subtitle1'>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</Typography>

                <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale='ru'>
                    <Grid container spacing={1}>
                        <Grid item xs={12} sm={6}>
                            <DateTimePicker
                                label='–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'
                                ampm={false}
                                disablePast={true}
                                value={startTime}
                                onChange={(newValue) => setStartTime(newValue)}
                                sx={{ width: '100%' }}
                                slotProps={{
                                    textField: {
                                        required: true,
                                    },
                                }}
                            />
                        </Grid>

                        <Grid item xs={12} sm={6}>
                            <DateTimePicker
                                label='–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è'
                                ampm={false}
                                disablePast={true}
                                value={endTime}
                                onChange={(newValue) => setEndTime(newValue)}
                                sx={{ width: '100%' }}
                                slotProps={{
                                    textField: {
                                        required: true,
                                    },
                                }}
                            />
                        </Grid>
                    </Grid>
                </LocalizationProvider>

                <TextField
                    label='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
                    variant='outlined'
                    multiline
                    minRows={2}
                    maxRows={4}
                    fullWidth
                    value={comment}
                    onChange={handleCommentChange}
                />

                <Typography variant='body2' align='right' color='text.secondary'>* –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</Typography>

                <Button variant='contained' type='submit' onClick={handleSubmit}>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
                <Button variant='outlined' type='reset' onClick={handleReset}>
                    –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
            </Card>
        </div>
    )
}

export default App
